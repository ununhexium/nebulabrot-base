package net.lab0.nebula;

import com.ochafik.lang.jnaerator.runtime.LibraryExtractor;
import com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;

/**
 * JNA Wrapper for library <b>net.lab0.nebula</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 * opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a
 * href="http://jna.dev.java.net/">JNA</a>.
 */
public interface MandelbrotLibrary extends Library
{
    public static final String            JNA_LIBRARY_NAME = LibraryExtractor.getLibraryPath("mandelbrot", true, MandelbrotLibrary.class);
    public static final NativeLibrary     JNA_NATIVE_LIB   = NativeLibrary.getInstance(MandelbrotLibrary.JNA_LIBRARY_NAME,
                                                                   MangledFunctionMapper.DEFAULT_OPTIONS);
    public static final MandelbrotLibrary INSTANCE         = (MandelbrotLibrary) Native.loadLibrary(MandelbrotLibrary.JNA_LIBRARY_NAME,
                                                                   MandelbrotLibrary.class, MangledFunctionMapper.DEFAULT_OPTIONS);
    
    /**
     * <i>native declaration : line 3</i><br>
     * enum values
     */
    /**
     * <i>native declaration : line 3</i><br>
     * enum values
     */
    public static interface PositionInParent
    {
        // / <i>native declaration : line 5</i>
        public static final int Root        = (int) -1;
        // / <i>native declaration : line 5</i>
        public static final int TopLeft     = (int) 0;
        // / <i>native declaration : line 5</i>
        public static final int TopRight    = (int) 1;
        // / <i>native declaration : line 5</i>
        public static final int BottomLeft  = (int) 2;
        // / <i>native declaration : line 5</i>
        public static final int BottomRight = (int) 3;
    };
    
    /**
     * <i>native declaration : line 8</i><br>
     * enum values
     */
    /**
     * <i>native declaration : line 8</i><br>
     * enum values
     */
    public static interface NodeStatus
    {
        /**
         * the node was never browsed<br>
         * <i>native declaration : line 10</i>
         */
        public static final int VOID    = (int) 0;
        /**
         * the node was browsed but was neither completely inside nor outside<br>
         * <i>native declaration : line 11</i>
         */
        public static final int BROWSED = (int) 1;
        /**
         * the node is completely inside the mandelbrot set<br>
         * <i>native declaration : line 12</i>
         */
        public static final int INSIDE  = (int) 2;
        /**
         * the node is completely inside the mandelbrot set<br>
         * <i>native declaration : line 13</i>
         */
        public static final int OUTSIDE = (int) 3;
    };
    
    /**
     * Original signature : <code>MandelbrotQuadTree* exec(unsigned int, unsigned int, unsigned int, unsigned int, double, double, double, double)</code><br>
     * <i>native declaration : line 30</i>
     */
    MandelbrotQuadTree exec(int pointsPerSide, int maxIter, int maxComputationDepth, int diffIterLimit, double minX, double maxX, double minY, double maxY);
}
