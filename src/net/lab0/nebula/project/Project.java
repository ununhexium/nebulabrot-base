package net.lab0.nebula.project;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.HashSet;
import java.util.InvalidPropertiesFormatException;
import java.util.Map;
import java.util.Set;

import net.lab0.nebula.exception.NonEmptyFolderException;
import net.lab0.nebula.exception.ProjectException;
import nu.xom.Attribute;
import nu.xom.Builder;
import nu.xom.Document;
import nu.xom.Element;
import nu.xom.Elements;
import nu.xom.ParsingException;
import nu.xom.ValidityException;

/**
 * Stores and loads the parameters of a project.
 * 
 * @see ProjectKey for the available properties.
 * 
 * @author 116@lab0.net
 * 
 */
public class Project
{
    /**
     * The path to the project's folder.
     */
    private Path                    projectFolder;
    
    /**
     * The object that holds the parameters of this project.
     */
    private Map<ProjectKey, String> properties = new HashMap<>();
    
    /**
     * Tries to load a project if it exists or create a new one if it doesn't.
     * 
     * @param projectFolder
     *            The path where the project should be located.
     * 
     * @throws NonEmptyFolderException
     *             If the folder doesn't contain a <code>project.xml</code> file but is not empty.
     * @throws InvalidPropertiesFormatException
     *             Data on input stream does not constitute a valid XML document with the mandated document type.
     * @throws IOException
     *             If there was an error while reading the properties file.
     * @throws ProjectException
     *             If the given path doesn't point to a directory.
     * @throws ParsingException
     *             If the project's xml file can't be parsed.
     * @throws ValidityException
     *             If the project's xml file is not valid.
     */
    public Project(Path projectFolder)
    throws ProjectException, NonEmptyFolderException, InvalidPropertiesFormatException, IOException, ValidityException,
    ParsingException
    {
        super();
        this.projectFolder = projectFolder;
        File folder = projectFolder.toFile();
        
        // this would be a new project
        if (!folder.exists())
        {
            folder.mkdirs();
        }
        
        // if the folder is not a directory: error
        if (!folder.isDirectory())
        {
            throw new ProjectException("The given path does not point to a directory.");
        }
        
        // this is an attempt to load an existing project
        File projectFile = getProjectXmlFile();
        // there is no project here, is this a new project ?
        if (!projectFile.exists())
        {
            // there is no file -> new project
            if (folder.list().length == 0)
            {
                save();
            }
            // the is already something going on in this folder -> can't do anything
            else
            {
                throw new NonEmptyFolderException(
                "The given folder is not a valid project folder. The folder must be empty to create a new project.");
            }
        }
        // load the project's properties by overriding the default properties.
        else
        {
            load();
        }
    }
    
    /**
     * Saves the parameters of this project in /path/pto/project/folder/<code>project.xml</code>.
     * 
     * @throws IOException
     */
    public synchronized void save()
    throws IOException
    {
        Element root = new Element("parameters");
        root.appendChild("Do not edit this file.");
        for (ProjectKey k : ProjectKey.values())
        {
            String value = properties.get(k);
            if (value != null)
            {
                Element entry = new Element("entry");
                entry.addAttribute(new Attribute("key", k.keyName));
                entry.addAttribute(new Attribute("value", value));
                root.appendChild(entry);
            }
        }
        
        Document document = new Document(root);
        
        File file = getProjectXmlFile();
        try (
            FileOutputStream fileOutputStream = new FileOutputStream(file);
            PrintWriter pw = new PrintWriter(fileOutputStream);)
        {
            pw.println(document.toXML());
        }
    }
    
    /**
     * Loads a parameters file.
     * 
     * @throws ValidityException
     *             If the xml file is not valid.
     * @throws ParsingException
     *             If there is an error while parsing the xml.
     * @throws IOException
     *             If there is an error while reading the file.
     */
    private synchronized void load()
    throws ValidityException, ParsingException, IOException
    {
        // create the parser
        Builder parser = new Builder();
        File file = getProjectXmlFile();
        // parse the file
        Document doc = parser.build(file);
        Element root = doc.getRootElement();
        Elements elements = root.getChildElements();
        
        // create a set of the valid keys
        Set<String> validKeys = new HashSet<>(ProjectKey.values().length);
        for (ProjectKey k : ProjectKey.values())
        {
            validKeys.add(k.keyName);
        }
        
        // read all the elements at the root of this xml file
        for (int i = 0; i < elements.size(); ++i)
        {
            Element node = elements.get(i);
            // only consider entry nodes
            if (node.getLocalName().equals("entry"))
            {
                String key = node.getAttributeValue("key");
                String value = node.getAttributeValue("value");
                // make sure that the key exists
                if (validKeys.contains(key))
                {
                    properties.put(ProjectKey.valueOf(key), value);
                }
            }
        }
    }
    
    /**
     * @return a <code>String</code> of the absolute path to this project.
     */
    public String getProjectFolder()
    {
        return projectFolder.toFile().getAbsolutePath();
    }
    
    /**
     * 
     * @return The file that contains the parameters of this project.
     */
    private File getProjectXmlFile()
    {
        File folder = this.projectFolder.toFile();
        File file = new File(folder, "project.xml");
        return file;
    }
}
